{
	"info": {
		"_postman_id": "e6993593-f59e-46bf-858f-2e8b65cf4d86",
		"name": "TESTING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9386974"
	},
	"item": [
		{
			"name": "https://twitter154.p.rapidapi.com/user/details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response matches the expected schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys(\r",
							"        'creation_date', \r",
							"        'user_id', \r",
							"        'username', \r",
							"        'name', \r",
							"        'follower_count', \r",
							"        'following_count', \r",
							"        'favourites_count', \r",
							"        'is_private', \r",
							"        'is_verified', \r",
							"        'is_blue_verified', \r",
							"        'location', \r",
							"        'profile_pic_url', \r",
							"        'profile_banner_url', \r",
							"        'description', \r",
							"        'external_url', \r",
							"        'number_of_tweets', \r",
							"        'bot', \r",
							"        'timestamp', \r",
							"        'has_nft_avatar', \r",
							"        'category', \r",
							"        'default_profile', \r",
							"        'default_profile_image', \r",
							"        'listed_count', \r",
							"        'verified_type'\r",
							"    );\r",
							"\r",
							"    pm.expect(responseData.follower_count).to.be.a('number');\r",
							"    pm.expect(responseData.following_count).to.be.a('number');\r",
							"    pm.expect(responseData.favourites_count).to.be.a('number');\r",
							"    pm.expect(responseData.is_private).to.satisfy(function(value) {\r",
							"        return value === null || typeof value === 'boolean';\r",
							"    });\r",
							"    pm.expect(responseData.is_verified).to.be.a('boolean');\r",
							"    pm.expect(responseData.is_blue_verified).to.be.a('boolean');\r",
							"    pm.expect(responseData.number_of_tweets).to.be.a('number');\r",
							"    pm.expect(responseData.bot).to.be.a('boolean');\r",
							"    pm.expect(responseData.timestamp).to.be.a('number');\r",
							"    pm.expect(responseData.has_nft_avatar).to.be.a('boolean');\r",
							"    pm.expect(responseData.default_profile).to.be.a('boolean');\r",
							"    pm.expect(responseData.default_profile_image).to.be.a('boolean');\r",
							"    pm.expect(responseData.listed_count).to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Username is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Follower count, following count, favourites count, and listed count are non-negative integers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.follower_count).to.be.a('number').and.to.be.at.least(0);\r",
							"    pm.expect(responseData.following_count).to.be.a('number').and.to.be.at.least(0);\r",
							"    pm.expect(responseData.favourites_count).to.be.a('number').and.to.be.at.least(0);\r",
							"    pm.expect(responseData.listed_count).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"pm.test(\"User ID is a number and has a minimum length of 8\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.user_id).to.exist;\r",
							"    pm.expect(responseData.user_id).to.be.a('string').and.to.have.lengthOf.at.least(8, \"User ID must have a minimum length of 8\");\r",
							"    pm.expect(Number(responseData.user_id)).to.be.a('number');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "x-rapidapi-host",
						"value": "twitter154.p.rapidapi.com"
					},
					{
						"key": "x-rapidapi-key",
						"value": "0ff89a1b7dmsh16302dad5d6d7f1p14be07jsnb27733f279a8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"elonmusk\",\"user_id\":\"44196397\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://twitter154.p.rapidapi.com/user/details",
					"protocol": "https",
					"host": [
						"twitter154",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						"user",
						"details"
					]
				},
				"description": "Generated from cURL: curl --request POST \\\r\n\t--url https://twitter154.p.rapidapi.com/user/details \\\r\n\t--header 'Content-Type: application/json' \\\r\n\t--header 'x-rapidapi-host: twitter154.p.rapidapi.com' \\\r\n\t--header 'x-rapidapi-key: 0ff89a1b7dmsh16302dad5d6d7f1p14be07jsnb27733f279a8' \\\r\n\t--data '{\"username\":\"elonmusk\",\"user_id\":\"44196397\"}'"
			},
			"response": []
		}
	]
}